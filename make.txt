# Makefile for UNIX 

# the compiler: gcc for C program, define as g++ for C++
CC = gcc
ifeq ($(OS), Windows_NT)
    CC = C:/mingw-w64/x86_64-6.2.0-win32-sjlj-rt_v5-rev1/mingw64/bin/gcc.exe
endif


# the static library archiver
AR = ar rcs

# compiler flags:
# -g enable debugging
# -Wall turn on all warnings 
# -D__USE_FIXED_PROTOTYPES__ force the compiler to use the correct headers 
# -ansi donâ€™t use GNU extensions, stick to ANSI (c89) 
# -std=c99 use newer version 
CFLAGS=-g -Wall -D__USE_FIXED_PROTOTYPES__ -std=c99

# libraries
ifeq ($(OS), Windows_NT)
	OS_X_LIBS =
	WINDOWS_LIBS += -lws2_32
	BONJOUR_LIBS += -Lc:/"Program Files"/"Bonjour SDK"/Lib/x64 -ldnssd
else
	UNAME_S := $(shell uname -s)
	ifeq ($(UNAME_S), Darwin)
		# OS X
		OS_X_LIBS += -framework CoreFoundation
		BONJOUR_LIBS =
		WINDOWS_LIBS =
	else
		# unix
		OS_X_LIBS =
		BONJOUR_LIBS =
		WINDOWS_LIBS =
	endif
endif

# include headers
ifeq ($(OS), Windows_NT)
	INCL_DIRS += -Ic:/"Program Files"/"Bonjour SDK"/Include
else
	INCL_DIRS +=
endif
CFLAGS += $(INCL_DIRS)

# the build target executable: 
TARGET = nsd
LIBRARY = libnsd.a

# source files 
SOURCE_FILES = network_service_discovery.o event_loop.o

all: $(TARGET)

$(TARGET): main.c $(LIBRARY) $(TEST_SOURCE_FILES)
	$(CC) $(CFLAGS) -o $(TARGET) main.c $(TEST_SOURCE_FILES) $(LIBRARY) $(OS_X_LIBS) $(WINDOWS_LIBS) $(BONJOUR_LIBS)

$(LIBRARY): $(SOURCE_FILES)
	$(AR) $(LIBRARY) $(SOURCE_FILES)

network_service_discovery.o: network_service_discovery.c network_service_discovery.h
	$(CC) $(CFLAGS) -c network_service_discovery.c

ifeq ($(OS), Windows_NT)
# WINDOWS
event_loop.o: windows/event_loop.c windows/event_loop.h
	$(CC) $(CFLAGS) -c windows/event_loop.c
else

UNAME_S := $(shell uname -s)
ifeq ($(UNAME_S), Darwin)
# OS X
event_loop.o: apple/event_loop.c apple/event_loop.h
	$(CC) $(CFLAGS) -c apple/event_loop.c

else
# UNIX
event_loop.o: unix/event_loop.c unix/event_loop.h
	$(CC) $(CFLAGS) -c unix/event_loop.c

endif
endif

clean: 
	$(RM) $(TARGET) $(TARGET).exe $(LIBRARY) $(SOURCE_FILES) $(TEST_SOURCE_FILES)
 