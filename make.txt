# Makefile for UNIX 

# the compiler: gcc for C program, define as g++ for C++
CC = gcc
ifeq ($(OS), Windows_NT)
    CC = C:/mingw-w64/x86_64-6.2.0-win32-sjlj-rt_v5-rev1/mingw64/bin/gcc.exe
endif

# the static library archiver
AR = ar rcs

# compiler flags:
# -g enable debugging
# -Wall turn on all warnings 
# -D__USE_FIXED_PROTOTYPES__ force the compiler to use the correct headers 
# -ansi donâ€™t use GNU extensions, stick to ANSI (c89) 
# -std=c99 use newer version 
CFLAGS=-g -Wall -D__USE_FIXED_PROTOTYPES__ -std=c99

# libraries
ifeq ($(OS), Windows_NT)
	OS_X_LIBS =
	WINDOWS_LIBS += -lws2_32
	BONJOUR_LIBS += -Lc:/"Program Files"/"Bonjour SDK"/Lib/x64 -ldnssd
else
	UNAME_S := $(shell uname -s)
	ifeq ($(UNAME_S), Darwin)
		# OS X
		OS_X_LIBS += -framework CoreFoundation
		BONJOUR_LIBS =
		WINDOWS_LIBS =
	else
		# unix
		OS_X_LIBS =
		BONJOUR_LIBS =
		WINDOWS_LIBS =
	endif
endif

# include headers
ifeq ($(OS), Windows_NT)
	INCL_DIRS += -Ic:/"Program Files"/"Bonjour SDK"/Include
else
	INCL_DIRS +=
endif
CFLAGS += $(INCL_DIRS)

# the build target executable: 
TARGET = nsd
LIBRARY = libnsd.a
SHARED_LIBRARY = libnsd.so

# on macOS build .dylib shared library
UNAME_S := $(shell uname -s)
ifeq ($(UNAME_S),Darwin)
	DYNAMIC_LIBRARY= libnsd.dylib
else 
	DYNAMIC_LIBRARY=
endif

# source files 
SOURCE_FILES = network_service_discovery.o event_loop.o

# test source files 
TEST_SOURCE_FILES = 

# outputs directories
OUTPUTS_DIR = outputs/debug
OUTPUTS_LIB_DIR = $(OUTPUTS_DIR)/lib
OUTPUTS_BIN_DIR = $(OUTPUTS_DIR)/bin
OUTPUTS_TEST_DIR = $(OUTPUTS_DIR)/test

all: directories libraries $(TARGET)

# make output directories
directories: 
	@mkdir -p $(OUTPUTS_DIR)
	@mkdir -p $(OUTPUTS_LIB_DIR)
	@mkdir -p $(OUTPUTS_BIN_DIR)
	@mkdir -p $(OUTPUTS_TEST_DIR)

libraries: $(LIBRARY) $(SHARED_LIBRARY) $(DYNAMIC_LIBRARY)

$(TARGET): $(LIBRARY) $(TEST_SOURCE_FILES)
	$(CC) $(CFLAGS) -o $(OUTPUTS_BIN_DIR)/$(TARGET) src/main.c $(OUTPUTS_LIB_DIR)/$(LIBRARY) $(OS_X_LIBS) $(WINDOWS_LIBS) $(BONJOUR_LIBS)

$(SHARED_LIBRARY): $(SOURCE_FILES)
	$(CC) $(CFLAGS) $(OS_X_LIBS) $(WINDOWS_LIBS) $(BONJOUR_LIBS) -shared -o $(OUTPUTS_LIB_DIR)/$(SHARED_LIBRARY) $(OUTPUTS_DIR)/*.o

$(DYNAMIC_LIBRARY): $(SOURCE_FILES)
	$(CC) $(CFLAGS) $(OS_X_LIBS) $(WINDOWS_LIBS) $(BONJOUR_LIBS) -dynamiclib -o $(OUTPUTS_LIB_DIR)/$(DYNAMIC_LIBRARY) $(OUTPUTS_DIR)/*.o

$(LIBRARY): $(SOURCE_FILES)
	$(AR) $(OUTPUTS_LIB_DIR)/$(LIBRARY) $(OUTPUTS_DIR)/*.o

network_service_discovery.o: src/network_service_discovery.c include/network_service_discovery.h
	$(CC) $(CFLAGS) -c src/network_service_discovery.c -o $(OUTPUTS_DIR)/network_service_discovery.o

ifeq ($(OS), Windows_NT)
# WINDOWS
event_loop.o: windows/event_loop.c windows/event_loop.h
	$(CC) $(CFLAGS) -c windows/event_loop.c -o $(OUTPUTS_DIR)/event_loop.o
else

UNAME_S := $(shell uname -s)
ifeq ($(UNAME_S), Darwin)
# OS X
event_loop.o: apple/event_loop.c apple/event_loop.h
	$(CC) $(CFLAGS) -c apple/event_loop.c -o $(OUTPUTS_DIR)/event_loop.o

else
# UNIX
event_loop.o: unix/event_loop.c unix/event_loop.h
	$(CC) $(CFLAGS) -c unix/event_loop.c -o $(OUTPUTS_DIR)/event_loop.o

endif
endif

clean: 
	$(RM) -rf $(OUTPUTS_DIR)
 